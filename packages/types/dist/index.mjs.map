{"version":3,"sources":["../src/course.ts","../src/lecture.ts","../src/segment.ts","../src/glossary.ts","../src/quiz.ts","../src/user.ts"],"sourcesContent":["import { z } from 'zod';\n\nexport const CourseVisibilityEnum = z.enum(['public', 'private', 'unlisted']);\n\nexport const CourseSchema = z.object({\n  id: z.string().uuid('course.id must be uuid').optional(),\n  orgId: z.string(),\n  title: z.string().min(3).max(160),\n  slug: z.string().regex(/^[a-z0-9-]+$/).min(3).max(120),\n  description: z.string().max(4000).optional().nullable(),\n  visibility: CourseVisibilityEnum.default('private'),\n  tags: z.array(z.string().min(1).max(32)).max(20).optional(),\n  estimatedMinutes: z.number().int().positive().max(100000).optional(),\n  createdAt: z.coerce.date().optional(),\n  updatedAt: z.coerce.date().optional(),\n});\n\nexport type Course = z.infer<typeof CourseSchema>;\n\nexport const ModuleSchema = z.object({\n  id: z.string().uuid().optional(),\n  courseId: z.string(),\n  title: z.string().min(2).max(160),\n  position: z.number().int().nonnegative(),\n});\nexport type Module = z.infer<typeof ModuleSchema>;\n","import { z } from 'zod';\n\nexport const LectureSchema = z.object({\n  id: z.string().uuid().optional(),\n  moduleId: z.string(),\n  title: z.string().min(2).max(160),\n  summary: z.string().max(2000).optional().nullable(),\n  durationSeconds: z.number().int().positive().max(4 * 60 * 60).optional(),\n  isPublished: z.boolean().default(false),\n  position: z.number().int().nonnegative(),\n  // will be validated separately / sanitized\n  contentMd: z.string().optional().nullable(),\n  createdAt: z.coerce.date().optional(),\n  updatedAt: z.coerce.date().optional(),\n});\n\nexport type Lecture = z.infer<typeof LectureSchema>;\n","import { z } from 'zod';\n\nexport const TranscriptCaptionSchema = z.object({\n  startMs: z.number().int().nonnegative(),\n  endMs: z.number().int().positive(),\n  text: z.string().max(500),\n}).refine(v => v.endMs > v.startMs, { message: 'endMs must be greater than startMs' });\n\nexport const MediaSegmentSchema = z.object({\n  id: z.string().uuid().optional(),\n  lectureId: z.string(),\n  kind: z.enum(['video', 'audio', 'interactive']),\n  src: z.string().url(),\n  byteSize: z.number().int().positive().max(10 * 1024 * 1024 * 1024).optional(),\n  mime: z.string().max(128),\n  durationSeconds: z.number().int().positive().max(4 * 60 * 60),\n  captions: z.array(TranscriptCaptionSchema).max(5000).optional(),\n  createdAt: z.coerce.date().optional(),\n});\n\nexport type MediaSegment = z.infer<typeof MediaSegmentSchema>;\nexport type TranscriptCaption = z.infer<typeof TranscriptCaptionSchema>;\n","import { z } from 'zod';\n\nexport const GlossaryTermSchema = z.object({\n  id: z.string().uuid().optional(),\n  courseId: z.string(),\n  term: z.string().min(1).max(120),\n  definition: z.string().min(1).max(5000),\n  aliases: z.array(z.string().min(1).max(120)).max(10).optional(),\n  createdAt: z.coerce.date().optional(),\n  updatedAt: z.coerce.date().optional(),\n});\n\nexport type GlossaryTerm = z.infer<typeof GlossaryTermSchema>;\n","import { z } from 'zod';\n\nexport const QuizItemKindEnum = z.enum(['single_choice', 'multi_choice', 'true_false', 'short_text']);\n\nexport const QuizItemSchema = z\n  .object({\n    id: z.string().uuid().optional(),\n    lectureId: z.string(),\n    kind: QuizItemKindEnum,\n    prompt: z.string().min(1).max(1000),\n    options: z.array(z.string().min(1).max(400)).max(20).optional(),\n    correctOptionIndexes: z.array(z.number().int().nonnegative()).max(20).optional(),\n    explanation: z.string().max(2000).optional().nullable(),\n    createdAt: z.coerce.date().optional(),\n  })\n  .refine(d => {\n    if ((d.kind === 'single_choice' || d.kind === 'multi_choice')) {\n      return !!d.options && d.options.length >= 2;\n    }\n    return true;\n  }, { message: 'at least two options required for choice questions', path: ['options'] });\n\nexport type QuizItem = z.infer<typeof QuizItemSchema>;\n","import { z } from 'zod';\nexport const UserSchema = z.object({\n  id: z.string(),\n  name: z.string().nullable().optional(),\n  email: z.string().email(),\n});\nexport type User = z.infer<typeof UserSchema>;\n"],"mappings":"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","names":["z","z","z","z","z"]}